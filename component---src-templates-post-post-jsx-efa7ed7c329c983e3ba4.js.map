{"version":3,"sources":["webpack:///./src/templates/post/post.module.less","webpack:///./src/components/Comment/index.jsx","webpack:///./src/templates/post/post.jsx"],"names":["module","exports","Comments","componentDidMount","d","s","this","props","pageCanonicalUrl","pageId","window","DISQUS","reset","reload","config","page","url","identifier","disqus_config","document","createElement","src","Config","disqusScript","setAttribute","Date","head","body","appendChild","render","id","React","Component","Post","data","markdownRemark","html","frontmatter","title","fluid","cover","childImageSharp","excerpt","path","canonicalUrl","Utils","resolvePageUrl","siteUrl","pathPrefix","className","description","keywords","Header","Sidebar","style","bannerImgContainer","bannerImg","alt","blogArticle","dangerouslySetInnerHTML","__html","Comment"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,mBAAqB,yCAAyC,UAAY,gCAAgC,YAAc,oC,kLCgD3HC,E,0GAzCbC,kBAAA,WAAqB,IAkBTC,EACAC,EAnBQ,OAClB,EAAqCC,KAAKC,MAAlCC,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,OAEtBC,OAAOC,OACTD,OAAOC,OAAOC,MAAM,CAClBC,QAAQ,EACRC,OAFkB,WAGhBR,KAAKS,KAAKC,IAAMR,EAChBF,KAAKS,KAAKE,WAAaR,MAI3BC,OAAOQ,cAAgB,WACrB,EAAKH,KAAKC,IAAMR,EAChB,EAAKO,KAAKE,WAAaR,GAIjBL,EAAIe,UACJd,EAAID,EAAEgB,cAAc,WACxBC,IAAMC,IAAOC,aACflB,EAAEmB,aAAa,kBAAmB,IAAIC,OACrCrB,EAAEsB,MAAQtB,EAAEuB,MAAMC,YAAYvB,K,EAKrCwB,OAAA,WACE,OACE,6BACE,yBAAKC,GAAG,oB,GA/BOC,IAAMC,W,gEC2FdC,UAnFF,SAAC,GAAc,IAC1B,EADyB,EAAXC,KACqBC,eAA3BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,YAEZC,EACED,EADFC,MAAmCC,EACjCF,EADKG,MAASC,gBAAmBF,MAAWG,EAC5CL,EAD4CK,QAASC,EACrDN,EADqDM,KAGnDC,EAAeC,IAAMC,eACzBxB,IAAOyB,QACPzB,IAAO0B,WACPL,GAEF,OACE,uBAAQM,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAAC,IAAD,CACEX,MAAOA,EACPY,YAAaR,EACbC,KAAMA,EACNQ,SAAU,CAAC,SAAU,SAAU,WAAY,sBAAuB,aAAc,UAAW,SAAU,SAAU,gBAEjH,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,yBAAKJ,UAAU,kBACb,4BAAKX,GACL,yBAAKW,UAAWK,IAAMC,oBACpB,kBAAC,IAAD,CAAKN,UAAWK,IAAME,UAAWjB,MAAOA,EAAOD,MAAOI,EAASe,IAAKnB,KAEtE,6BAASW,UAAWK,IAAMI,YAAaC,wBAAyB,CAAEC,OAAQxB,KAC1E,kBAACyB,EAAD,CAASrD,iBAAkBoC,EAAcnC,OAAQ6B,U","file":"component---src-templates-post-post-jsx-efa7ed7c329c983e3ba4.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bannerImgContainer\":\"post-module--bannerImgContainer--2EOq4\",\"bannerImg\":\"post-module--bannerImg--21NV6\",\"blogArticle\":\"post-module--blogArticle--3ImmI\"};","/* eslint-disable func-names */\n/* Vendor imports */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n/* App imports */\nimport Config from '../../../config';\n\nclass Comments extends React.Component {\n  componentDidMount() {\n    const { pageCanonicalUrl, pageId } = this.props;\n\n    if (window.DISQUS) {\n      window.DISQUS.reset({\n        reload: true,\n        config() {\n          this.page.url = pageCanonicalUrl;\n          this.page.identifier = pageId;\n        },\n      });\n    } else {\n      window.disqus_config = () => {\n        this.page.url = pageCanonicalUrl;\n        this.page.identifier = pageId;\n      };\n      (function () {\n        // eslint-disable-next-line no-undef\n        const d = document;\n        const s = d.createElement('script');\n        s.src = Config.disqusScript;\n        s.setAttribute('data-timestamp', +new Date());\n        (d.head || d.body).appendChild(s);\n      }());\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"disqus_thread\" />\n      </div>\n    );\n  }\n}\n\nComments.propTypes = {\n  pageCanonicalUrl: PropTypes.string.isRequired,\n  pageId: PropTypes.string.isRequired,\n};\n\nexport default Comments;\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport Header from '../../components/PageLayout/Header';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport SEO from '../../components/Seo';\nimport Comment from '../../components/Comment';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\n\nimport 'prismjs/themes/prism-solarizedlight.css';\nimport './highlight-syntax.less';\nimport style from './post.module.less';\n\nconst Post = ({ data }) => {\n  const { html, frontmatter } = data.markdownRemark;\n  const {\n    title, cover: { childImageSharp: { fluid } }, excerpt, path,\n  } = frontmatter;\n\n  const canonicalUrl = Utils.resolvePageUrl(\n    Config.siteUrl,\n    Config.pathPrefix,\n    path,\n  );\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <SEO\n          title={title}\n          description={excerpt}\n          path={path}\n          keywords={['Rolwin', 'Reevan', 'Monteiro', 'FullStack developer', 'Javascript', 'ReactJS', 'NodeJS', 'Gatsby', 'technology']}\n        />\n        <Header />\n        <SidebarWrapper>\n          <div className=\"marginTopTitle\">\n            <h1>{title}</h1>\n            <div className={style.bannerImgContainer}>\n              <Img className={style.bannerImg} fluid={fluid} title={excerpt} alt={title} />\n            </div>\n            <article className={style.blogArticle} dangerouslySetInnerHTML={{ __html: html }} />\n            <Comment pageCanonicalUrl={canonicalUrl} pageId={title} />\n          </div>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($postPath: String!) {\n    markdownRemark(frontmatter: { path: { eq: $postPath } }) {\n      html\n      timeToRead\n      frontmatter {\n        title\n        date(formatString: \"DD MMM YYYY\")\n        tags\n        path\n        excerpt\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { path: { ne: $postPath } }\n        fileAbsolutePath: { regex: \"/index.md$/\" }\n      }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            tags\n            excerpt\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Post;\n"],"sourceRoot":""}